\input texinfo

@c sqldf.texi --- Reference manual

@c Copyright (C) 2019-2022 Steve Nunez

@c This file is part of SQL Data Frames.

@c This program is distributed under the terms of the Microsoft Public
@c License.


@c Commentary:

@c Generated automatically by Declt version 4.0 beta 2 "William Riker"
@c on Wed Jul 20 10:55:37 2022 GMT+8.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename sqldf.info
@settitle The SQL Data Frames Reference Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Format Specific Tweaks
@c ====================================================================
@tex
%% Declt uses several Unicode characters to "reveal" blanks. This
%% works fine in HTML or Info output, but TeX will have problems with
%% these. The code below translates those characters to something that
%% TeX can handle.

%% U+23B5 (Bottom Square Bracket), used to reveal white spaces, is
%% translated to its Computer Modern teletype version.
\DeclareUnicodeCharacter{23B5}{{\tt\char'040}}

%% U+21B5 (Downwards Arrow With Corner Leftwards), used to reveal
%% carriage returns, is translated to \hookleftarrow in math mode.
\DeclareUnicodeCharacter{21B5}{\ensuremath\hookleftarrow}

%% U+21E5 (Rightwards Arrow To Bar), used to reveal tabs, is
%% translated to something that looks similar, based on a rightarrow
%% and a vertical bar from the math extension font.
\DeclareUnicodeCharacter{21E5}{%
  \ensuremath{\rightarrow\kern-.5em\mathchar\"130C}}


%% Declt uses several Unicode characters to replace "fragile" ones in
%% anchor names and references. These characters are chosen to resemble
%% the original ones, without interfering with Info syntax. In TeX
%% however, we can switch them back to the original versions, because
%% cross-references are done differently. In theory, I think we could do
%% something similar for HTML output (again, only the Info syntax poses
%% problems), but I don't know how to do something similar to what's
%% below.

%% U+2024 (One Dot Leader) replaces periods.
\DeclareUnicodeCharacter{2024}{.}

%% U+2236 (Ratio) replaces colons.
\DeclareUnicodeCharacter{2236}{:}

%% U+2768 (Medium Left Parenthesis Ornament) replaces left parenthesis.
\DeclareUnicodeCharacter{2768}{(}

%% U+2769 (Medium Right Parenthesis Ornament) replaces right parenthesis.
\DeclareUnicodeCharacter{2769}{)}

%% U+214B (Turned Ampersand) replaces ampersands.
\DeclareUnicodeCharacter{214B}{&}

%% U+2216 (Set Minus) replaces backslashes.
\DeclareUnicodeCharacter{2216}{\char"5C}

%% The following ones are already defined in texinfo.tex so we have nothing
%% more to do:
%% U+201A (Single Low-9 Quotation Mark) replaces commas.
%% U+2205 (Empty Set) replaces empty symbol names.

@end tex



@c ====================================================================
@c Settings
@c ====================================================================
@setchapternewpage odd
@documentdescription
The SQL Data Frames Reference Manual, version 1.0.0.
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@c ---------------
@c Indexing macros
@c ---------------

@c Packages
@macro packageindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro systemindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro

@c Modules
@macro moduleindex{name}
@tpindex @t{\name\}
@tpindex Module, @t{\name\}
@end macro

@c Files
@macro fileindex{name}
@tpindex @t{\name\}
@tpindex File, @t{\name\}
@end macro

@c The following macros are meant to be used within @defxxx environments.
@c Texinfo performs half the indexing job and we do the other half.

@c Constants
@macro constantsubindex{name}
@vindex @r{Constant, }\name\
@end macro

@c Special variables
@macro specialsubindex{name}
@vindex @r{Special Variable, }\name\
@end macro

@c Symbol macros
@macro symbolmacrosubindex{name}
@vindex @r{Symbol Macro, }\name\
@end macro

@c Slots
@macro slotsubindex{name}
@vindex @r{Slot, }\name\
@end macro

@c Macros
@macro macrosubindex{name}
@findex @r{Macro, }\name\
@end macro

@c Compiler Macros
@macro compilermacrosubindex{name}
@findex @r{Compiler Macro, }\name\
@end macro

@c Functions
@macro functionsubindex{name}
@findex @r{Function, }\name\
@end macro

@c Methods
@macro methodsubindex{name}
@findex @r{Method, }\name\
@end macro

@c Generic Functions
@macro genericsubindex{name}
@findex @r{Generic Function, }\name\
@end macro

@c Setf Expanders
@macro expandersubindex{name}
@findex @r{Setf Expander, }\name\
@end macro

@c Method Combinations
@macro combinationsubindex{name}
@findex @r{Method Combination, }\name\
@end macro

@c Conditions
@macro conditionsubindex{name}
@tpindex @r{Condition, }\name\
@end macro

@c Structures
@macro structuresubindex{name}
@tpindex @r{Structure, }\name\
@end macro

@c Types
@macro typesubindex{name}
@tpindex @r{Type, }\name\
@end macro

@c Classes
@macro classsubindex{name}
@tpindex @r{Class, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Lisp-Stat
@direntry
* SQL Data Frames Reference Manual: (sqldf). The SQL Data Frames Reference Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} 2019-2022 Steve Nunez

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The SQL Data Frames Reference Manual
@subtitle SQL queries for Data Frames, version 1.0.0

@author Steve Nunez <@email{steve@atchar{}symbolics.tech}>

@page
@quotation
This manual was generated automatically by Declt 4.0b2.
@end quotation
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Top
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The SQL Data Frames Reference Manual
This is the SQL Data Frames Reference Manual, version 1.0.0,
generated automatically by Declt version 4.0b2.

@menu
* Copying:: The Microsoft Public License
* Systems:: The systems documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Systems, Top, Top
@unnumbered Copying
@quotation
This program is distributed under the terms of the Microsoft Public
License.
@end quotation



@c ====================================================================
@c Systems
@c ====================================================================
@node Systems, Files, Copying, Top
@chapter Systems
The main system appears first, followed by any subsystem dependency.

@menu
* The sqldf system::
@end menu


@c ----------------
@c The sqldf system
@c ----------------
@node The sqldf system, , Systems, Systems
@section @t{sqldf}
@anchor{❨1❩}@c
@systemindex{sqldf}@c
A wrapper for SQLite allowing querying of  Data Frames
@table @strong
@item Long Name
SQL queries for Data Frames
@item Author
Steve Nunez <@email{steve@atchar{}symbolics.tech}>
@item Home Page
@uref{http://lisp-stat.dev/docs/manuals/sqldf}
@item Source Control
@t{(GIT git://github.com/Lisp-Stat/sqldf)}
@item Bug Tracker
@uref{https://github.com/Lisp-Stat/sqldf/issues}
@item License
MS-PL
@item Long Description
SQLDF is a library for querying data frames using SQL@comma{} optimised for convenience over memory consumption. It uses an in-memory data base for transparent queries.
@item Version
1.0.0
@item Dependencies
@itemize @bullet
@item
@t{sqlite}@: (system).
@item
@t{data-frame}@: (system).
@item
@t{select}@: (system).
@end itemize
@item Source
@ref{❨2❩, , @t{sqldf.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{❨3❩, , @t{pkgdcl.lisp}}@: (file).
@item
@ref{❨4❩, , @t{utils.lisp}}@: (file).
@item
@ref{❨5❩, , @t{sqldf.lisp}}@: (file).
@end itemize
@end table



@c ====================================================================
@c Files
@c ====================================================================
@node Files, Packages, Systems, Top
@chapter Files
Files are sorted by type and then listed depth-first from the systems
components trees.

@menu
* Lisp files::
@end menu


@c ----------
@c Lisp files
@c ----------
@node Lisp files, , Files, Files
@section Lisp
@menu
* The sqldf/sqldf․asd file::
* The sqldf/pkgdcl․lisp file::
* The sqldf/utils․lisp file::
* The sqldf/sqldf․lisp file::
@end menu

@node The sqldf/sqldf․asd file, The sqldf/pkgdcl․lisp file, Lisp files, Lisp files
@subsection @t{sqldf/sqldf.asd}
@anchor{❨2❩}@c
@fileindex{sqldf.asd}@c
@table @strong
@item Source
@ref{❨2❩, , @t{sqldf.asd}}.
@item Parent Component
@ref{❨1❩, , @t{sqldf}}@: (system).
@item ASDF Systems
@ref{❨1❩, , @t{sqldf}}.
@end table

@node The sqldf/pkgdcl․lisp file, The sqldf/utils․lisp file, The sqldf/sqldf․asd file, Lisp files
@subsection @t{sqldf/pkgdcl.lisp}
@anchor{❨3❩}@c
@fileindex{pkgdcl.lisp}@c
@table @strong
@item Source
@ref{❨2❩, , @t{sqldf.asd}}.
@item Parent Component
@ref{❨1❩, , @t{sqldf}}@: (system).
@item Packages
@ref{❨6❩, , @t{sqldf}}.
@end table

@node The sqldf/utils․lisp file, The sqldf/sqldf․lisp file, The sqldf/pkgdcl․lisp file, Lisp files
@subsection @t{sqldf/utils.lisp}
@anchor{❨4❩}@c
@fileindex{utils.lisp}@c
@table @strong
@item Dependency
@ref{❨3❩, , @t{pkgdcl.lisp}}@: (file).
@item Source
@ref{❨2❩, , @t{sqldf.asd}}.
@item Parent Component
@ref{❨1❩, , @t{sqldf}}@: (system).
@item Internals
@itemize @bullet
@item
@ref{❨15❩, , @t{*downcase-symbols*}}@: (special variable).
@item
@ref{❨18❩, , @t{*escape-sql-names-p*}}@: (special variable).
@item
@ref{❨17❩, , @t{*sqlite-reserved-words*}}@: (special variable).
@item
@ref{❨13❩, , @t{execute-to-column}}@: (function).
@item
@ref{❨12❩, , @t{from-sql-name}}@: (function).
@item
@ref{❨16❩, , @t{sqlite-column-type}}@: (function).
@item
@ref{❨10❩, , @t{statement-column-type}}@: (function).
@item
@ref{❨11❩, , @t{to-sql-name}}@: (function).
@end itemize
@end table

@node The sqldf/sqldf․lisp file, , The sqldf/utils․lisp file, Lisp files
@subsection @t{sqldf/sqldf.lisp}
@anchor{❨5❩}@c
@fileindex{sqldf.lisp}@c
@table @strong
@item Dependency
@ref{❨4❩, , @t{utils.lisp}}@: (file).
@item Source
@ref{❨2❩, , @t{sqldf.asd}}.
@item Parent Component
@ref{❨1❩, , @t{sqldf}}@: (system).
@item Public Interface
@itemize @bullet
@item
@ref{❨7❩, , @t{read-table}}@: (function).
@item
@ref{❨8❩, , @t{sqldf}}@: (function).
@item
@ref{❨9❩, , @t{write-table}}@: (function).
@end itemize
@item Internals
@ref{❨14❩, , @t{create-df-table}}@: (function).
@end table



@c ====================================================================
@c Packages
@c ====================================================================
@node Packages, Definitions, Files, Top
@chapter Packages
Packages are listed by definition order.

@menu
* The sqldf package::
@end menu


@c -----------------
@c The sqldf package
@c -----------------
@node The sqldf package, , Packages, Packages
@section @t{sqldf}
@anchor{❨6❩}@c
@packageindex{sqldf}@c
SQLDF is a facility for querying data frames with SQL
@table @strong
@item Source
@ref{❨3❩, , @t{pkgdcl.lisp}}.
@item Use List
@t{common-lisp}.
@item Public Interface
@itemize @bullet
@item
@ref{❨7❩, , @t{read-table}}@: (function).
@item
@ref{❨8❩, , @t{sqldf}}@: (function).
@item
@ref{❨9❩, , @t{write-table}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨15❩, , @t{*downcase-symbols*}}@: (special variable).
@item
@ref{❨18❩, , @t{*escape-sql-names-p*}}@: (special variable).
@item
@ref{❨17❩, , @t{*sqlite-reserved-words*}}@: (special variable).
@item
@ref{❨14❩, , @t{create-df-table}}@: (function).
@item
@ref{❨13❩, , @t{execute-to-column}}@: (function).
@item
@ref{❨12❩, , @t{from-sql-name}}@: (function).
@item
@ref{❨16❩, , @t{sqlite-column-type}}@: (function).
@item
@ref{❨10❩, , @t{statement-column-type}}@: (function).
@item
@ref{❨11❩, , @t{to-sql-name}}@: (function).
@end itemize
@end table



@c ====================================================================
@c Definitions
@c ====================================================================
@node Definitions, Indexes, Packages, Top
@chapter Definitions
Definitions are sorted by export status, category, package, and then by
lexicographic order.

@menu
* Public Interface::
* Internals::
@end menu


@c ----------------
@c Public Interface
@c ----------------
@node Public Interface, Internals, Definitions, Definitions
@section Public Interface
@menu
* Public ordinary functions::
@end menu

@node Public ordinary functions, , Public Interface, Public Interface
@subsection Ordinary functions
@deffn {Function} {read-table} (db table)
@anchor{❨7❩}@c
@functionsubindex{read-table}@c
Read TABLE and return a data frame with the contents. Keys are interned in a package with the same name as TABLE.
@table @strong
@item Package
@ref{❨6❩, , @t{sqldf}}.
@item Source
@ref{❨5❩, , @t{sqldf.lisp}}.
@end table
@end deffn
@deffn {Function} {sqldf} (sql)
@anchor{❨8❩}@c
@functionsubindex{sqldf}@c
Execute SQL (a string) on a data frame and return a new data frame with the results.@*
The data frame is identified by the word following FROM (case insensitive) in the SQL string.  An in-memory SQLite database is creaetd@comma{} the contents of the data frame loaded@comma{} the query performed and a new DATA-FRAME returned with the results and the database deleted.  In most cases@comma{} using this library is faster@comma{} from a developers time perspective@comma{} than writing the code to perform the same query.  SQLDF has been tested with data frames of 350K rows with no slow-down noted.  The R documentation for their version of SQLDF suggests that it could be faster than Lisp native queries.  Note that the SQL query must use SQL style names for columns and not the Lisp versions@comma{} e.g. flight-time becomes flight_time.
@table @strong
@item Package
@ref{❨6❩, , @t{sqldf}}.
@item Source
@ref{❨5❩, , @t{sqldf.lisp}}.
@end table
@end deffn
@deffn {Function} {write-table} (db table df)
@anchor{❨9❩}@c
@functionsubindex{write-table}@c
Write data-frame DF to TABLE on connection DB. :na symbols are converted to "NA" strings in the database.
@table @strong
@item Package
@ref{❨6❩, , @t{sqldf}}.
@item Source
@ref{❨5❩, , @t{sqldf.lisp}}.
@end table
@end deffn


@c ---------
@c Internals
@c ---------
@node Internals, , Public Interface, Definitions
@section Internals
@menu
* Private special variables::
* Private ordinary functions::
@end menu

@node Private special variables, Private ordinary functions, Internals, Internals
@subsection Special variables
@defvr {Special Variable} {*downcase-symbols*}
@anchor{❨15❩}@c
@specialsubindex{*downcase-symbols*}@c
@table @strong
@item Package
@ref{❨6❩, , @t{sqldf}}.
@item Source
@ref{❨4❩, , @t{utils.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*escape-sql-names-p*}
@anchor{❨18❩}@c
@specialsubindex{*escape-sql-names-p*}@c
@table @strong
@item Package
@ref{❨6❩, , @t{sqldf}}.
@item Source
@ref{❨4❩, , @t{utils.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*sqlite-reserved-words*}
@anchor{❨17❩}@c
@specialsubindex{*sqlite-reserved-words*}@c
@table @strong
@item Package
@ref{❨6❩, , @t{sqldf}}.
@item Source
@ref{❨4❩, , @t{utils.lisp}}.
@end table
@end defvr

@node Private ordinary functions, , Private special variables, Internals
@subsection Ordinary functions
@deffn {Function} {create-df-table} (db table df)
@anchor{❨14❩}@c
@functionsubindex{create-df-table}@c
Create a database table of NAME in DB according to the schema of DF.  This function is to create a table for DF prior to loading.  Lisp style symbol names are converted to SQL compatible names.
@table @strong
@item Package
@ref{❨6❩, , @t{sqldf}}.
@item Source
@ref{❨5❩, , @t{sqldf.lisp}}.
@end table
@end deffn
@deffn {Function} {execute-to-column} (db sql &rest parameters)
@anchor{❨13❩}@c
@functionsubindex{execute-to-column}@c
@table @strong
@item Package
@ref{❨6❩, , @t{sqldf}}.
@item Source
@ref{❨4❩, , @t{utils.lisp}}.
@end table
@end deffn
@deffn {Function} {from-sql-name} (str)
@anchor{❨12❩}@c
@functionsubindex{from-sql-name}@c
Convert a string to a symbol@comma{} upcasing and replacing underscores with
hyphens.
@table @strong
@item Package
@ref{❨6❩, , @t{sqldf}}.
@item Source
@ref{❨4❩, , @t{utils.lisp}}.
@end table
@end deffn
@deffn {Function} {sqlite-column-type} (sequence)
@anchor{❨16❩}@c
@functionsubindex{sqlite-column-type}@c
Return a format string for the most general type found in sequence@*
Use this for sequences of type T to determine how to declare the column to SQLite.
@table @strong
@item Package
@ref{❨6❩, , @t{sqldf}}.
@item Source
@ref{❨4❩, , @t{utils.lisp}}.
@end table
@end deffn
@deffn {Function} {statement-column-type} (stmt column-number)
@anchor{❨10❩}@c
@functionsubindex{statement-column-type}@c
Return the type string of a column of a query statement
@table @strong
@item Package
@ref{❨6❩, , @t{sqldf}}.
@item Source
@ref{❨4❩, , @t{utils.lisp}}.
@end table
@end deffn
@deffn {Function} {to-sql-name} ()
@anchor{❨11❩}@c
@functionsubindex{to-sql-name}@c
Convert a symbol or string into a name that can be a sql table@comma{} column@comma{} or
operation name. Add quotes when escape-p is true@comma{} or escape-p is :auto and the
name contains reserved words. Quoted or delimited identifiers can be used by
passing :literal as the value of escape-p. If escape-p is :literal@comma{} and the
name is a string then the string is still escaped but the symbol or string is
not downcased@comma{} regardless of the setting for *downcase-symbols* and the
hyphen and forward slash characters are not replaced with underscores.
Ignore-reserved-words is only used internally for column names which are allowed
to be reserved words@comma{} but it is not recommended.
@table @strong
@item Package
@ref{❨6❩, , @t{sqldf}}.
@item Source
@ref{❨4❩, , @t{utils.lisp}}.
@end table
@end deffn



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Definitions, Top
@appendix Indexes
@menu
* Concept index::
* Function index::
* Variable index::
* Data type index::
@end menu


@c -------------
@c Concept index
@c -------------
@node Concept index, Function index, Indexes, Indexes
@appendixsec Concepts
@printindex cp

@page


@c --------------
@c Function index
@c --------------
@node Function index, Variable index, Concept index, Indexes
@appendixsec Functions
@printindex fn

@page


@c --------------
@c Variable index
@c --------------
@node Variable index, Data type index, Function index, Indexes
@appendixsec Variables
@printindex vr

@page


@c ---------------
@c Data type index
@c ---------------
@node Data type index, , Variable index, Indexes
@appendixsec Data types
@printindex tp

@bye

@c sqldf.texi ends here
